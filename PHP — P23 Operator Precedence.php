<?php
// Приоритет оператора.

/**Приоритет оператора просто определяет, какая операция будет выполнена первой. Вы видели приоритет оператора в математике. Операторы умножения и деления выполняются раньше, чем операторы сложения и вычитания. Со всеми различными операторами, которые у нас есть в PHP, интерпретатор должен знать, какую операцию выполнять в каком порядке.
*/

//Для начала рассмотрим простой пример по математике: 2 + 2 * 2 = ?

// Все точно также как в математике, сначала умножение и деление, после вычитание и сложение, в нашем примере, ответом получится число = (6). Хотя кто не знает правила, мог получить в ответе число (8), что было бы неправильно.

//Вам не нужно знать приоритет каждого оператора: вы всегда можете посмотреть его, если столкнетесь с чем-то не понятным. Тем не менее, те, с которыми вы должны быть знакомы, следующие:


/*
 new
** (экспоненциальный)
++ -- (увеличение/уменьшение)
! (Логическое "НЕТ")
* / % (Арифмитический)
+ - . (Арифметика/конкатенация)
== != === !== <> <=> (Сравнение)
&& (Логическое)
|| (Логическое)
?: (ternary оператор)
= += -= *= /= %= (присваивание)
and (Логическое)
xor (Логическое)
or (Логическое) 
*/

//Логические операции - самый частый, и вызывающий наибольшее количество проблем момент.

// Взглянем на код

var_dump( true || !true && false );

//Если бы мы работали слева направо, мы могли бы оценить выражение следующим образом
/*
1. true || !true
2. true || false = true
3. true && false = false
*/

//Результат который мы получаем, это false. Чтобы оператор OR(||) был true, либо левая, либо правая часть, должна быть true(Или сразу обе стороны должны быть true), так как у нас левая часть, является true(истинной), то и все выражение у нас является истинной. А вот чтобы оператор AND(&&) возвращал нам значение true, у нас уже обе стороны должны быть true(истинными). В нашем случае, поскольку у нас правая часть явяется false(ложной), то и все выражение является false.

//Однако, данный результато не является действительным, так как тут не учитывались приоритеты операторов. В приведенном выше примере, испольются операторы: !, && и ||. (!) - оператор имеет наивысший приоритет, за ним уже следует (&&), и в конце идет оператор (||). 

/*
Посмотрим как выглядит с приоритетами.
1. !true && false
2. false && false = false
3. true || false = true
*/

// В данном случае, мы получили true. Следование приоритетам, важно! Если бы нам нужно было бы добиться результата false и так, чтобы все шло слева на право, то нам нужно было бы, проставить скобки(), как в математике, Например вот так.

var_dump( (true || !true) && false );// Тут приориты уже будут другими, сначала скобки, после остальное.

// Когда мы используем круглые скобки(), мы говорим PHP, чтобы он выполнил сначала эту операцию, а после переходил к другой(повторюсь вновь, тоже самое, что и в математике). И в данном случае, мы получили false в браузере.

// Стоит также немного задержаться на операторе (&&). Работа оператора (&&) заключается в том, что он сначала смотрит на выражение слева, и если оно ложно, он даже не переходит в правую часть.
// Вот такие пироги.






















?>