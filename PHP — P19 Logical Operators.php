<?php
//Логические операторы.

//Логические операторы довольно просты, если вы изучали булеву алгебру или знакомы с логическими вентилями.

//Мы рассмотрели, как проверить, является ли выражение истинным или нет, но как мы можем проверить, являются ли истинными несколько выражений? С логическими операторами так.


/*
В PHP есть несколько операторов, которые проверяют истинность двух выражений.

1)AND: возвращает true, только если и левое, и правое выражения оцениваются как true.
2)&&: то же, что и AND, но с другим приоритетом.
3)||: возвращает true, если либо левое, либо правое, либо оба выражения оцениваются как true.
4)OR: то же, что и || но с другим приоритетом.
XOR: возвращает истину только в том случае, если истинно либо левое, либо правое выражение, но не оба.
!: Отрицание. Возвращает true, если false, и false, если true.
*/

// ОПЕРАТОРЫ AND И &&

var_dump(true && true); //Будет оцениваться браузером как истина, и вернет нам true, так как у нас оба выжаения должны быть истинами


$a = "lowered";
$b = "boosted";

var_dump($a == "lowered" AND $b == "boosted");//Вернул истину, так как оба выражения и слева от and и справа являются истиной

//Мы можем использовать оператор отрицания, чтобы получить противоположное значение выражения.


$a = "code deweloper";
$b = "laravel";

var_dump($a =="code deweloper" && $b != "zend");//левая сторона оценивается как true, поскольку $a равно code deweloper. Выражение справа также оценивается как истинное, так как $b не равно zend; это верное утверждение. Таким образом, true && true приводит к true.

var_dump(!false);//Вернет нам true
var_dump(!true);// Вернет нам false


//Теперь когда понятна концептия, остальные примеры будут проще, их просто нужно запомнить

var_dump(true AND false);// каждый раз когда в операторе AND есть ложь, будет возвращаться false, как в данном случае, поэтому чтоб получить true, нам обязательно нужно иметь с двух сторон true

//Пример ниже также оценивается как false, поскольку он является синонимом AND, за исключением приоритета.

var_dump(true && false);//Тоже самое что и AND, тут вернется false, потому что одна из сторон выражения является false, дабы получить true, нужно чтоб обе части выражения были TRUE


// ОПЕРАТОР ||

/*Оператор называется оператором «включающее или», что означает, что вы можете указать, что одна или обе стороны должны быть истинными, и это будет истинным. Следующие результаты верны для || оператор:

правда || ЛОЖЬ
ложно || истинный
правда || истинный

*/

var_dump(true || false);// Вернет нам Истину, Данный оператор работает так, нужно чтобы любое из частей выражений было TRUE, и тогда нам вернется TRUE, НО если оба выражения и справа и слева от оператора, будут ложны FALSE, то вернется FALSE. 

var_dump(true || true);// Вернет true, так как у нас с двух сторон true, не понял, тогда смотри чуть выше

var_dump(false || true);//Вернет true, так как одна из сторон является true

var_dump(false || false);//Единственный вариант когда вернется false, это когда у нас будет с двух сторон false, как в данном случае. 

//Также мы можем использовать оператор (OR) вместо (||), но нужно помнить что они имеют разные приоритеты  


// ОПЕРАТОР XOR

//Существует оператор исключающее OR, XOR, который отличается от оператора включающего OR, который мы только что рассмотрели. Оператор XOR оценивается как истина только тогда, когда одна сторона истинна, а другая ложна.

//Для понимания, можно представить ресторан, в котором предлагают поесть суп, или мясо, но сразу оба нельзя, либо то, либо другое


var_dump(true XOR true);// Будет возвращено false, так как сразу два true или два false, НЕЛЬЗЯ!!! нужно чтобы один оператор был true, другой false, и не важно в каком порядке

var_dump(true XOR false);// Вернет true, смотри выше почему

var_dump(false XOR true);// Вернет нам true

var_dump(false XOR false);//Вернет нам false, так как тут вновь обра являются ложными

//Чтобы запомнить данный пример, нужно просто представлять ресторан, где ты обязан выбрать одно блюду, но сразу два взять, или сразу от двух отказаться НЕЛЬЗЯ


//Вы можете составлять выражения используя разные логические операторы. Помните, что в зависимости от приоритета за раз будет оцениваться один оператор. У вас всегда будет левое и правое выражение.


var_dump(true && (true || false)); // Вернет нам TRUE


//В приведенном выше примере мы сначала оцениваем выражение в круглых скобках. Истина || ложь оцениваются как истина. Затем мы можем оценить следующее выражение, true && true, которое дает true.

//Чаже повторять эту статью, КОНЕЦ!












?>