<?php
//Простые массивы

//Что такое массив? С точки зрения непрофессионала, это способ хранить несколько элементов вместе в одной переменной. Вы можете создавать разные переменные для всего, но иногда это просто непрактично. Представьте, что вы извлекаете тысячи записей из базы данных. Вы не можете или не должны создавать тысячи различных переменных для хранения каждой записи. Вы будете использовать массив и хранить все записи в одной переменной. Затем вы можете пройти через массив (я знаю, что мы еще не рассмотрели циклы) и отобразить каждый элемент массива.


$numbers = array(1, 2, 3, 5, 10, 20); // это обычный способ создания массива, который состоит из обычных целых чисел



//Массивы не должны хранить только целочисленные значения; они могут хранить любой тип данных, включая, например, строки.

$drivers_i_hate = array(
    'Drivers that turn on their signals before checking',
    'Drivers that do the speed limit in the left two lanes',
    'Drivers that are clearly on their phones'
); // данный массив содержит несколько string значений, про то что бесит в водителях


//Заметь что в верхнем массиве, каждое значение массива находится в отдельной строке. PHP не имеет ограничения на количество пробелов или новых символов строки, которые вы можете иметь после каждого элемента массива. Таким образом, для удобочитаемости вы можете сделать так, чтобы он выглядел так, как вы хотите.

//Чтобы получить доступ к определенному элементу массива, нужно просто знать его индекс. Индекс пишется в квадратных скобках и самый первый элемент начинается с цифры [0]. Php сам присваивает индекс, от 0-n


//Например в массиве $drivers_i_hate всего три элемента, значить чтобы вызывать например самый первый, нужно прописывать echo название массива[номер элемента, который хотим вызывать]
echo $drivers_i_hate[0]; // вот так, данный код вызовет самый первый элемент массива и покажет его в браузере, так как это строка, мы в браузере просто увидим текст этой строки.

//Чтобы отобразить последний элемент, можно просто подсчитать все элементы массива, определить какой индекс у последнего и затем как и в прошлом примере, просто вывести его, например вот так.

echo $drivers_i_hate[2]; //Выведет третий элемент массива, не забывай, счет начинается не с единицы, а с нуля
// Но данный способ хорош только если у тебя массив содержит маленькое количество элементов, но если их 100 - 1000, то считать задолбаешься, поэтому есть специальные встроенные функции в php, называется count() и sizeof(), я буду пользоваться count()

echo count( $drivers_i_hate ) . "<br>";//Данный код, покажет количество элементов массива, а именнт 3. В круглых скобках, НУЖНО ПИСАТЬ count(НАЗВАНИЕ МАССИВА В КОТОРОМ ХОТИМ ПОДСЧИТАТЬ ЭЛЕМЕНТЫ) 

//Теперь с помощью той информации что нам уже известно, все что нам нужно чтобы обратиться к самому последнему элементу в массиве с огромным количеством элементов, нужно просто написать count(название массива) и далее просто вычесть единицу у числа, вот и все. Продолжим



$last_index = count($drivers_i_hate) - 1; // В данных двух строках кода происходит следующее, Мы создаем переменную, которой присваиваем последний элемент массива, чтобы получить его индекс, мы подсчитываем элементы массива с помощью функции count(Название массива), а после у того что получилось, сразу вычитаем единицу, так мы получаем последний элемент массива, который присваивается к нашей новой переменной, а далее мы просто
echo $drivers_i_hate[ $last_index ] . "<br>"; //Вот эта строчка, очень интересная, смысл такой, мы отображаем наш старый массив про водителей, а далее в квадратных скобках, указываем новую переменную, которая уже мы знаем содержит последний элемент массива, а так как мы указали его в квадратных скобках, переменная стала элементом массива, содержащим последний элемент, и в итоге этой строки мы получим последний элемент массива, а именно строку, которая содержалась последний

//есть другой способ, который выведет все тоже самое, но будет на строку короче
//Если бы мы захотели, мы могли бы просто передать все выражение между квадратными скобками; нам не нужно хранить значение индекса внутри переменной.
echo $drivers_i_hate[ count($drivers_i_hate) - 1 ];
//Вот что видит наш php в данной строке

/**1.PHP видит оператор echo, поэтому он знает, что он будет выводить что-то на экран.
2.Он приходит к переменной. Эта переменная является массивом.
3.PHP смотрит в квадратные скобки для значения индекса, чтобы он мог выяснить, какой элемент массива он должен вывести на экран.
4.Значение индекса явно не заключено в квадратные скобки; PHP начинает вычислять выражение в попытке выяснить, каково значение индекса.
5.Он замечает, что есть арифметическая операция: левая сторона минус правая сторона.
6.PHP ищет число с левой стороны. Он не видит его, но видит функцию подсчета.
7.Он вычисляет функцию count() и получает значение 3.
8.Затем он вычитает 1 из 3 и получает значение 2. Целое значение 2 является значением индекса.
9.Он ищет место в памяти, выделенное для этого значения индекса, и извлекает строку string:Drivers, которые явно находятся на их телефонах.
10.PHP отображает эту строку на экране. */



//Еще один простой способ создать массив, пустой массив

$people = []; // тут сказано что массив не имеет элементов, а также называется как $people, вот и все, нами создан пустой массив со своим названием



//Мы создадим массив с именем $person и сохраним строки, целые числа, числа с плавающей запятой и даже логические значения. На этот раз воспользуемся нотацией в квадратных скобках для инициализации массива. Пример ниже.

$person = [
    'Nick Kandelaki',
    24,
    '68 fucking kg',
    'Goodo_O@mail.ru',
    true,
    '1+1'
];


var_dump($person);//var_dump(Название массива) Если бы мы хотели увидеть все значения внутри массива, а также тип данных каждого значения, мы могли бы использовать встроеннуюв PHP функцию var_dump(). Функция var_dump() буквально просто сбрасывает информацию о переменной.

//Что делать, если бы мы хотели добавить новый элемент в массив после инициализации массива. Есть несколько подходов, которые вы можете предпринять. Мы можем добавить элемент массива в конец массива, используя имя массива, добавить квадратные скобки в конец имени, вставить последнее значение индекса + 1 в скобки и, наконец, присвоить ему значение.


//Для того чтобы добавить еще один элемент к нашему массиву, мы можем просто прописать массив, далее квадратные скобки и оператор присваивания со значением которое хотим присвоить, в квадратные скобки нужно вставлять не используемый элемент.

$person[6] = "It debil";//В нашем случае, наш массив имеет 6 элементов, это значит что индексы элементов от нуля до 5 уже заняты, потому мы пишем в квадратные скобки цифру 6.
var_dump($person);//Снова просмотр всех элементов массива и их типов.


//Если у нас массив состоит из огромного числа элементов, и нам нужно к нему добавить еще один элемент, но мы не знаем какой индекс прописывать, тогда пишем все как в прошлых строках, но в квадратных скобках не прописываем элемент, php сам поставит элемент в конце нашего массива, например как внизу

$person[] = "Make it Stop by Rise Against";//Не указываем в квадратных скобках индекс, и php сам выставил его последним элементом массива

var_dump($person);//И вновь просмотр массива, после добавления нового элемента.

//Еще вариант, но он чутка чудной, просто написать рандомной число в индекс массива, например 25 или 26 или 585945895, короче любое, но тогда массива от индеса последнего элемента, до того рандомного числа, не будут существовать и если мы попробуем добавить элемент прошлым способом, то код определить последний элемент, и присвоит нашему новому элементу цифру +1 от прошлого Короче вот так в примере

$person[26] = "HAHAHAHAH WOMEN";//Новый элемент массива создан под индексом 26, и теперь если прописать Var_dump(), то будут идти элементы от 0 до 7, а потом сразу 26, то есть элементы между 7 и 26 не будут существовать, и если после этого добавить еще элемент, но уже не указывать в квадратных скобках индекс, как делали повыше, то код закинет наш новый элемент уже 27 индексом, вот так странно это работает


//Теперь поговорим о том как можно модифицировать наше значение, то есть изменить какой нибудь элемент массива и его значение, но для этого нам нужно обязательно знать индекс массива, иначе не получится, например как внизу

//У нас есть массив, в котором указан возраст, я изменю возраст, я знаю что индекс в массиве считается от 0, так что просто считаем, получился индекс 1, и пишем такой код

$person[1] = 25;//Данный код перезапишет наше значение с 24 лет, которые были указаны выше в коде, на 25, которые я указал сейчас, вот это и называется модифицированием элементов МАССИВА

//Теперь рассмаотрим как удалять массив, для этого нужно использовать команду unset($название массива[индекс элемента, который хотим удалить]); В нашем случае, мы удалим наш последний элемент, а именно элемент под индексом 26


unset($person[26]);//Удаление элемента массива под индексом 26

$person[] = "HAHAHAHAH WOMEN";//Добавление нового элемента массива

//Php запоминает индексы элементоа массивов, даже тех что были удалены, поэтому даже если мы добавим еще один элемент с пустыми квадратными скобками, php пройдется по массиву, увидит последний индекс, в нашем случае индекс 26, и добавит новый элемент под индексом 27, вот такие вот дела

//ОЧЕНЬ НЕ РЕКОМЕНДУЕТСЯ ДОБАВЛЯТЬ ЭЛЕМЕНТЫ МАССИВА, С УКАЗАНИЕМ РАНДОМНОГО ЧИСЛА В ИНДЕКС












?>