<?php
//Что такое ассоциативный массив? 
//ассоциативный массив — это в значительной степени словарь. Вместо доступа к массиву с помощью значения индекса вы будете получать к нему доступ с помощью ключа. Этот ключ указывает на ценность. Ключи в PHP могут быть целыми числами или строками. Если попытаться сохранить число с плавающей запятой в качестве ключа, оно будет приведено к целому числу. Логическое значениеtrueбудет иметь значение 1, а значение false— 0.

//Зачем использовать ассоциативный массив над обычным массивом? Если бы у нас был массив, подобный приведенному ниже, как бы мы узнали, что представляют собой некоторые из значений? Мы видим, что 32 является элементом внутри массива, но что на самом деле означает 32?


$person = [
    'Nick Kandelaki',
    24,
    'Goodo_O@mail.ru',
    '68kg',
    'true'
];//Тут приведен обычный массив, и по комментарию выше, мы например не можем понять что означает число 24, для этого и есть ассоциативный массив, это что то вроде пометок, то есть мы знаем что 24 это мой возраст, но кто будет смотреть это может не понять, потом уможжно написать через ассоциацию как будет внизу, указать какой то ключ, для лучшего восприятия.

//Если бы мы хотели указать, что означает каждое из этих значений, мы могли бы использовать строки в качестве наших ключей и явно указать, что представляет каждый из элементов.
$person = [
    'name' =>'Nick Kandelaki',
    'age' => 24,
    'email' =>'Goodo_O@mail.ru',
    'weight' => '68kg',
    "i'm beautiful" => 'true'
];//После того как мы поставили ассоциации, теперь тому кто будет просматривать данный массив, будет проще воспринять информацию, легче воспринять данный код.

//Чтобы получить доступ к элементу с помощью нашего КЛЮЧА - Ассоциации, нужно делать также как мы делали с обычными элементами и их индексами, но вместо цифры индекса, нужно в квадратных скобках прописывать уже наш ключ, как внизу

echo $person['name']; //Код обратиться к массиву $person и с помощью нашего ключа, перейдет в тот элемент, который прикреплен к ключу и выведет в браузер значение данного ключа, а именно Nick Kandelaki

//Но если теперь вызовим через индекс, то вылезет ошибка, нужно использовать var_dump чтобы выводить в браузер какой то элемент массива, также не забывать про индекс

//чтобы добавить элемент к массиву, мы будем использовать то что использовали в прошлой статье. Вот так.

$person[] = 'Some text'; // Но так как мы не использовали никакие ассоциации, то при вызове через вар дамп, нашему ДАННОМУ элементу, будет присвоен индекс ноль (0), так как у всех остальных, вместо индексов, были ключи- ассоциации
var_dump($person);

//Мы можем удалить данный массив, с помощью функции unset()

unset($person[0]);//Мы уже поняли по var_dump что индекс элемента нашего последнего "безключевого" элемента равен нулю, поэтому в данной строчке кода, чтобы его удалить, мы использовали в квадратных скобках именно цифру 0
var_dump($person);//Просто проверка все ли правильно в коде выходит

//Чтобы изменить элемент массива с помощью ключа, нужно в принципе сделать тоже самое что и в прошлой статье. В прошлой статье чтобы изменить массив, нужно было название массива, далее квадратные скобки, индекс изменяймого нами массива, и далее уже через оператор присваивания, прописывать измененыые значения.
//Но в случае изменения с помощью ключа, нужно вместо индекса в квадратные скобки, ставить ключ в кавычках, выглядит синтаксит вот так: $название массива['ключ элемента массива, который хотим изменить'] = новое значение для элемента;
//Как внизу
$person["age"] = 25;//Изменяет элемент массива с 24 лет, на 25 лет, с помощью ключа ассоциации
var_dump($person);//Опять же просто проверка кода, все гуд. 









?>