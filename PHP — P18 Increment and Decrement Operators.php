<?php
// Операторы увеличения и уменьшения: ++ --


/*HP содержит операторы увеличения и уменьшения. Это операторы, которые либо добавляют 1, либо вычитают 1 из текущего значения. Операторы могут быть префиксными или постфиксными, и каждый раз будут давать несколько разные результаты.

Оператор увеличения на 1: ++
Оператор уменьшения на 1: --
*/

//Обычно, чтобы добавить 1 к значению, вы должны использовать оператор сложения. Как напримет вот тут пониже.

$a = 5;
$a = $a + 1;
var_dump($a);// Выдаст нам 6 в браузере, потому что мы увеличили его на один чуть выше в коде. В приведенном выше примере вы оцениваете выражение справа, $a + 1, которое становится равным 6, а затем присваиваете значение обратно $a слева.

//С помощью оператора постфиксного приращения мы можем добавить ++ в конец переменной, и он выполнит ту же операцию.

$b = 5;
var_dump($b++);// Будет в браузере 5, также как было
var_dump($b);// А вот тут уже будет число 6.
//ПОЧЕМУ? При использовании оператора пост(после переменной ставиться ++)фиксного приращения сначала отображается значение, а затем выполняется операция. Если мы вызовем значение после, оно отобразит предыдущее значение плюс 1.



// А вот уже с оператором префикс(до переменной ставиться ++)-инкремент выражение сначала оценивается, а затем отображается.

$c = 5;
var_dump(++$c);//Сначала будет произведена операция прибавления, так как у нас оператор стоит перед переменной, а уже после будет отображена сама переменная, но уже измененная нашим оператором, в данном случае браузер отобразит значение 6.

var_dump($c);// Так как прошлым оператором мы уже изменили наше значение переменной $c и оно стало равно 6, то данный код, просто отобразит нам цифру 6 из нашей переменной.

/* Вам нужно помнить об этом только в том случае, если вы выполняете операцию внутри выражения или передаете переменную в качестве аргумента. Если вы увеличиваете значение, а затем вызываете его, результат будет одинаковым независимо от того, ставите ли вы префикс или постфикс оператора.
*/


$a = 5;
$a++;
echo $a; // Так как у нас до вызова, уже использовался оператор ++ (прибавление на единицу), то в браузере отобразиться сразу число 6.
$b = 5;
++$b;
echo $b; //Тут не имеет значение где написано оператор, так как он использовался до вызова, и будет тоже самое что и в прошлом примере, браузер выдаст нам число 6
$c = 5;
echo $c++; // Это уже было выше в коде, сначала идет вызов переменной, а после уже ее изменение и добавление к ней единицы с помощью оператора ++, поэтому браузер выдаст нам число 5. и если повторить данную команду еще раз, но без оператора, то уже число будет изменено на 6, так как прошлый оператор подействовал
echo $c; // А если вот так вот повторить данную команду еще раз, но без оператора, то уже число будет изменено на 6, так как прошлый оператор подействовал на переменную, и теперь браузер нам отобразит число 6
$d = 5;
echo ++$d; // Сначала идет оператор, потом переменная, значит переменная уже изменена, и в браузере выдаст нам число 6.



// ОБСАЛЮТНО ВСЕ ЧТО ПИСАЛ ВЫШЕ ПО ОТНОШЕНИЮ К ОПЕРАТОРУ ++, ТОЧНО ТАКЖЕ ОТНОСИТСЯ И К ОПЕРАТОРУ --


$a = 5;
$a--;
echo $a; // В браузере напишет нам число 4, так как оператор был написан до вызова переменной
$b = 5;
--$b;
echo $b; // В браузере напишет нам число 4, так как оператор был написан до вызова переменной
$c = 5;
echo $c--;//В браузере напишет нам число 5, так как оператор был написан после вызова переменной
echo $c;//А если вот так вот повторить данную команду еще раз, но без оператора, то уже число будет изменено на 4, так как прошлый оператор подействовал на переменную, и теперь браузер нам отобразит число 4
$d = 5;
echo --$d; // В браузере напишет нам число 4, так как оператор был написан до вызова переменной.

//Операторы инкремента и декремента широко используются в циклах.


//Конец.












?>