<?php
//Операторы сокращения или сокращенные операторы


/**Сокращенный оператор объединяет выражение справа с оператором присваивания. Переменная, которая появляется слева от оператора присваивания, должна отображаться и справа, чтобы вы могли использовать сокращенную запись.

Давайте посмотрим на следующий код:
*/


$x = 1;
$x = $x +1;
echo $x; // Код выдаст нам 2.

/**Вот что происходит:
1.PHP присваивает целочисленное значение 1 переменной $x.
2.Во втором операторе вычисляется $x + 1. $x содержит значение 1, поэтому результатом будет 1 + 1, что равно 2.
3.Затем значение 2 присваивается $x.
Поэтому если вы выведете $x, будет отображено 2.
*/


//Поскольку переменная $x появляется с обеих сторон оператора присваивания, мы можем использовать сокращенный оператор, чтобы сократить выражение $x = $x + 1. Вы просто удаляете $x с правой стороны и перемещаете оператор + впереди оператора =: $x += 1.

$x = $x + 1; // Длинный подход.
$x += 1; // Сокращенная версия.


//Сокращенные операции не ограничиваются целыми числами; вы можете использовать сокращенный оператор конкатенации для объединения строк.

// Это Длинный подход.
$msgs = "Helloooo";
$msgs = $msgs . " there"; // Пробел не забываем, а то слова "склеятся"


$msgs = "Helloooo";
$msgs .= " there";// Пробел не забываем, а то слова "склеятся"
// Этот подход покороче, удобно правда?

// Продолжим.

//Мы можем применить ту же логику к операциям вычитания, умножения и даже к операторам модуля.

$x = 0; // Обычная переменная.
$x += 7;
// Тоже самое, что и: $x = $x + 7;
// $x = 0 + 7; 
// $x = 7

$x -= 5;
// Тоже самое, что и: $x = $x - 5;
// $x = 7 - 5;
// $x = 2;

$x *= 2;
// Тоже самое, что и: $x = $x * 2;
// $x = 2 * 2;
// $x = 4;

$x %= 2;
// Тоже самое, что и: $x = $x % 2;
// $x = 4 % 2;
// $x = 0;


//Сокращенные операторы часто используются в программировании; они настолько часты, что на самом деле редко можно увидеть длинный подход. 

// Конец. Продолжим?



























?>